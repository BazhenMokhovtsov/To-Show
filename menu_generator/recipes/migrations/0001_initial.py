# Generated by Django 5.1.2 on 2025-02-08 23:31

import django.db.models.deletion
import mptt.fields
import multiselectfield.db.fields
import recipes.models.instruction
import recipes.models.open_recipe
import recipes.models.user_recipe
import user.models.user
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("title", models.CharField(max_length=200, unique=True, verbose_name="Название")),
                (
                    "brutto",
                    models.CharField(
                        choices=[("pieces", "штук"), ("grams", "граммы")],
                        max_length=50,
                        verbose_name="Единица измерения",
                    ),
                ),
                ("calories", models.FloatField(default=0, verbose_name="Калории")),
                ("protein", models.FloatField(default=0, verbose_name="Белки")),
                ("fat", models.FloatField(default=0, verbose_name="Жиры")),
                ("carbohydrates", models.FloatField(default=0, verbose_name="Углеводы")),
            ],
            options={
                "verbose_name": "Продукт",
                "verbose_name_plural": "Продукты",
                "ordering": ["title"],
            },
        ),
        migrations.CreateModel(
            name="Instruction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("text", models.TextField(blank=True, verbose_name="Текст")),
                ("step", models.PositiveIntegerField(verbose_name="Шаг")),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to=recipes.models.instruction.upload_image,
                        verbose_name="Изображение к шагу",
                    ),
                ),
                (
                    "recipe_id",
                    models.IntegerField(blank=True, null=True, verbose_name="Айди рецепта"),
                ),
                (
                    "recipe_title",
                    models.TextField(blank=True, null=True, verbose_name="Название рецепта"),
                ),
                (
                    "user",
                    models.ForeignKey(
                        default=recipes.models.instruction.get_admin,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Инструкция",
                "verbose_name_plural": "Инструкции",
                "ordering": ["step"],
            },
        ),
        migrations.CreateModel(
            name="OpenRecipe",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "title",
                    models.CharField(max_length=200, unique=True, verbose_name="Название рецепта"),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, max_length=3000, null=True, verbose_name="Описание рецепта"
                    ),
                ),
                (
                    "create_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="Дата создания рецепта"),
                ),
                (
                    "update_date",
                    models.DateTimeField(auto_now=True, verbose_name="Дата обновления рецепта"),
                ),
                (
                    "json_products",
                    models.JSONField(
                        blank=True, default=dict, null=True, verbose_name="JSON продукты рецепта"
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to=recipes.models.open_recipe.upload_image,
                        verbose_name="Изображение рецепта",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("soups", "Супы"),
                            ("hot", "Горячее"),
                            ("salads", "Салаты"),
                            ("snacks", "Закуски"),
                            ("baking", "Выпечка"),
                            ("Sauces and marinades", "Соусы и маринады"),
                            ("billets", "Заготовки"),
                            ("drinks", "Напитки"),
                            ("desserts", "Дессерты"),
                            ("garnish", "Гарниры"),
                        ],
                        max_length=50,
                        verbose_name="Тип рецепта",
                    ),
                ),
                (
                    "meal_time",
                    multiselectfield.db.fields.MultiSelectField(
                        choices=[
                            ("breakfast", "Завтрак"),
                            ("lunch", "Обед"),
                            ("after_tea", "Полдник"),
                            ("snack", "Перекус"),
                            ("dinner", "Ужин"),
                        ],
                        max_length=38,
                        verbose_name="Время приёма",
                    ),
                ),
                (
                    "cooking_time",
                    models.PositiveIntegerField(
                        blank=True, default=0, null=True, verbose_name="Время приготовления"
                    ),
                ),
                ("likes", models.IntegerField(db_index=True, default=0, verbose_name="Лайки")),
                (
                    "total_views",
                    models.IntegerField(
                        db_index=True, default=0, verbose_name="Количество просмотров"
                    ),
                ),
                (
                    "cal_100_gram",
                    models.FloatField(default=0, verbose_name="Калорийность на 100 грамм"),
                ),
                (
                    "total_calories",
                    models.FloatField(default=0, verbose_name="Калорийность рецепта"),
                ),
                (
                    "total_protein",
                    models.FloatField(default=0, verbose_name="Кол-во белков в рецепте"),
                ),
                ("total_fat", models.FloatField(default=0, verbose_name="Жирность рецепта")),
                (
                    "total_carbohydrates",
                    models.FloatField(default=0, verbose_name="Кол-во углеводов в рецепте"),
                ),
                (
                    "instructions",
                    models.ManyToManyField(
                        related_name="open_recipes",
                        to="recipes.instruction",
                        verbose_name="Инструкции к рецепту",
                    ),
                ),
                (
                    "products",
                    models.ManyToManyField(
                        blank=True,
                        related_name="recipes",
                        to="recipes.product",
                        verbose_name="Продукты рецепта",
                    ),
                ),
            ],
            options={
                "verbose_name": "Открытый рецепт",
                "verbose_name_plural": "Открытые рецепты",
                "ordering": ["-update_date"],
            },
        ),
        migrations.CreateModel(
            name="Like",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        default=user.models.user.User,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Пользователь",
                    ),
                ),
                (
                    "recipe",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="recipes.openrecipe",
                        verbose_name="Рецепт",
                    ),
                ),
            ],
            options={
                "verbose_name": "Лайк",
                "verbose_name_plural": "Лайки",
                "ordering": ["-recipe"],
            },
        ),
        migrations.CreateModel(
            name="ProductCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        max_length=200, unique=True, verbose_name="Название Категории"
                    ),
                ),
                ("lft", models.PositiveIntegerField(editable=False)),
                ("rght", models.PositiveIntegerField(editable=False)),
                ("tree_id", models.PositiveIntegerField(db_index=True, editable=False)),
                ("level", models.PositiveIntegerField(editable=False)),
                (
                    "parent",
                    mptt.fields.TreeForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="recipes.productcategory",
                    ),
                ),
            ],
            options={
                "verbose_name": "Категория продукта",
                "verbose_name_plural": "Категории продуктов",
                "ordering": ["title"],
            },
        ),
        migrations.AddField(
            model_name="product",
            name="category",
            field=mptt.fields.TreeForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="recipes.productcategory",
                verbose_name="Категория продукта",
            ),
        ),
        migrations.CreateModel(
            name="RecipeCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        max_length=200, unique=True, verbose_name="Название категории"
                    ),
                ),
                ("lft", models.PositiveIntegerField(editable=False)),
                ("rght", models.PositiveIntegerField(editable=False)),
                ("tree_id", models.PositiveIntegerField(db_index=True, editable=False)),
                ("level", models.PositiveIntegerField(editable=False)),
                (
                    "parent",
                    mptt.fields.TreeForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="recipes.recipecategory",
                    ),
                ),
            ],
            options={
                "verbose_name": "Категория рецептов",
                "verbose_name_plural": "Категории рецептов",
                "ordering": ["title"],
            },
        ),
        migrations.AddField(
            model_name="openrecipe",
            name="category",
            field=mptt.fields.TreeForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="open_recipes",
                to="recipes.recipecategory",
                verbose_name="Категория рецепта",
            ),
        ),
        migrations.CreateModel(
            name="UserRecipe",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("title", models.CharField(max_length=255, verbose_name="Название рецепта")),
                (
                    "description",
                    models.TextField(
                        blank=True, max_length=3000, null=True, verbose_name="Описание рецепта"
                    ),
                ),
                (
                    "create_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="Дата создания"),
                ),
                (
                    "update_date",
                    models.DateTimeField(auto_now=True, verbose_name="Дата обновления"),
                ),
                (
                    "json_products",
                    models.JSONField(blank=True, default=dict, verbose_name="JSON продуктов"),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to=recipes.models.user_recipe.upload_recipe_image,
                        verbose_name="Изображение",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("soups", "Супы"),
                            ("hot", "Горячее"),
                            ("salads", "Салаты"),
                            ("snacks", "Закуски"),
                            ("baking", "Выпечка"),
                            ("Sauces and marinades", "Соусы и маринады"),
                            ("billets", "Заготовки"),
                            ("drinks", "Напитки"),
                            ("desserts", "Дессерты"),
                            ("garnish", "Гарниры"),
                        ],
                        max_length=50,
                        verbose_name="Тип рецепта",
                    ),
                ),
                (
                    "meal_time",
                    multiselectfield.db.fields.MultiSelectField(
                        choices=[
                            ("breakfast", "Завтрак"),
                            ("lunch", "Обед"),
                            ("after_tea", "Полдник"),
                            ("snack", "Перекус"),
                            ("dinner", "Ужин"),
                        ],
                        max_length=38,
                        verbose_name="Время приёма",
                    ),
                ),
                (
                    "cooking_time",
                    models.PositiveIntegerField(
                        blank=True, default=0, null=True, verbose_name="Время приготовления"
                    ),
                ),
                (
                    "cal_100_gram",
                    models.FloatField(default=0, verbose_name="Калорийность на 100 грамм"),
                ),
                (
                    "total_calories",
                    models.FloatField(default=0, verbose_name="Калорийность рецепта"),
                ),
                (
                    "total_protein",
                    models.FloatField(default=0, verbose_name="Кол-во белков в рецепте"),
                ),
                ("total_fat", models.FloatField(default=0, verbose_name="Жирность рецепта")),
                (
                    "total_carbohydrates",
                    models.FloatField(default=0, verbose_name="Кол-во углеводов в рецепте"),
                ),
                ("edited", models.BooleanField(default=False, verbose_name="Изменен")),
                (
                    "category",
                    mptt.fields.TreeForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="user_recipes",
                        to="recipes.recipecategory",
                        verbose_name="Категория",
                    ),
                ),
                (
                    "instructions",
                    models.ManyToManyField(
                        blank=True,
                        related_name="user_recipes",
                        to="recipes.instruction",
                        verbose_name="Инструкция",
                    ),
                ),
                (
                    "original_recipe",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="user_recipes",
                        to="recipes.openrecipe",
                        verbose_name="Оригинальный рецепт",
                    ),
                ),
                (
                    "products",
                    models.ManyToManyField(
                        blank=True,
                        related_name="user_recipes",
                        to="recipes.product",
                        verbose_name="Продукты",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        default=user.models.user.User,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_recipes",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Пользователь",
                    ),
                ),
            ],
            options={
                "verbose_name": "Рецепт пользователя",
                "verbose_name_plural": "Рецепты пользователя",
                "ordering": ["-update_date"],
            },
        ),
        migrations.AddIndex(
            model_name="instruction",
            index=models.Index(fields=["step"], name="recipes_ins_step_f124ea_idx"),
        ),
        migrations.AddIndex(
            model_name="like",
            index=models.Index(fields=["user", "recipe"], name="recipes_lik_user_id_2a2a10_idx"),
        ),
        migrations.AddConstraint(
            model_name="like",
            constraint=models.UniqueConstraint(
                fields=("user", "recipe"), name="unique_user_recipe_likes"
            ),
        ),
        migrations.AddIndex(
            model_name="productcategory",
            index=models.Index(fields=["title"], name="recipes_pro_title_434d82_idx"),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(fields=["title"], name="recipes_pro_title_e2415e_idx"),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(fields=["category"], name="recipes_pro_categor_46498c_idx"),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(fields=["title", "category"], name="recipes_pro_title_4c57ca_idx"),
        ),
        migrations.AddIndex(
            model_name="recipecategory",
            index=models.Index(fields=["title"], name="recipes_rec_title_35c4db_idx"),
        ),
        migrations.AddIndex(
            model_name="openrecipe",
            index=models.Index(fields=["title"], name="recipes_ope_title_694df1_idx"),
        ),
        migrations.AddIndex(
            model_name="openrecipe",
            index=models.Index(fields=["update_date"], name="recipes_ope_update__32bea5_idx"),
        ),
        migrations.AddIndex(
            model_name="openrecipe",
            index=models.Index(fields=["category"], name="recipes_ope_categor_42e425_idx"),
        ),
        migrations.AddIndex(
            model_name="openrecipe",
            index=models.Index(fields=["type"], name="recipes_ope_type_267b61_idx"),
        ),
        migrations.AddIndex(
            model_name="openrecipe",
            index=models.Index(fields=["meal_time"], name="recipes_ope_meal_ti_4dfa91_idx"),
        ),
        migrations.AddIndex(
            model_name="userrecipe",
            index=models.Index(fields=["title"], name="recipes_use_title_6d6b92_idx"),
        ),
        migrations.AddIndex(
            model_name="userrecipe",
            index=models.Index(fields=["update_date"], name="recipes_use_update__91c4af_idx"),
        ),
        migrations.AddIndex(
            model_name="userrecipe",
            index=models.Index(fields=["category"], name="recipes_use_categor_fbf192_idx"),
        ),
        migrations.AddIndex(
            model_name="userrecipe",
            index=models.Index(fields=["type"], name="recipes_use_type_085e3a_idx"),
        ),
        migrations.AddIndex(
            model_name="userrecipe",
            index=models.Index(fields=["meal_time"], name="recipes_use_meal_ti_178777_idx"),
        ),
    ]
